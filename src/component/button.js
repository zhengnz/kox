// Generated by CoffeeScript 1.12.1
(function() {
  var BaseModel, btnGroupTemplate, btnTemplate, buttonGroupViewModel, buttonViewModel,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseModel = require('./base');

  btnTemplate = require('../tpl/button.html');

  btnGroupTemplate = require('../tpl/buttonGroup.html');

  buttonViewModel = (function(superClass) {
    extend(buttonViewModel, superClass);

    function buttonViewModel(params, componentInfo) {
      var ieVersion, ref;
      buttonViewModel.__super__.constructor.call(this, params);
      this.data = ko.dataFor(componentInfo.element);
      ieVersion = (ref = ko.utils.ieVersion) != null ? ref : 10;
      this.can_use_animate = ieVersion > 9;
      this.click = params.click ? params.click.bind(this.data) : function() {};
      this.active = ko.observable(false);
      this.hover = ko.observable(false);
      this.disable = ko.pureComputed((function(_this) {
        return function() {
          return ko.unwrap(params.disable || false);
        };
      })(this));
      this.loading = ko.pureComputed((function(_this) {
        return function() {
          return ko.unwrap(params.loading || false);
        };
      })(this));
      this.href = ko.pureComputed((function(_this) {
        return function() {
          return ko.unwrap(params.href || 'javascript:;');
        };
      })(this));
      this.size = ko.pureComputed((function(_this) {
        return function() {
          return ko.unwrap(params.size || null);
        };
      })(this));
      this.type = ko.pureComputed(function() {
        return ko.unwrap(params.type || null);
      });
      this.cls = ko.pureComputed((function(_this) {
        return function() {
          var cls, fluid, shape;
          cls = 'ko-button';
          if (_this.type() != null) {
            cls = cls + " ko-" + (_this.type());
          }
          if (componentInfo.templateNodes.length === 0) {
            cls = cls + " ko-icon-only";
          }
          if (_this.active()) {
            cls = cls + " ko-active";
          }
          if (_this.hover()) {
            cls = cls + " ko-hover";
          }
          shape = ko.unwrap(params.shape || null);
          if (shape) {
            cls = cls + " ko-" + shape;
          }
          fluid = ko.unwrap(params.fluid || null);
          if (fluid) {
            cls = cls + " ko-fluid";
          }
          if (_this.size()) {
            cls = cls + " ko-" + (_this.size());
          }
          if (_this.disable() === true) {
            cls = cls + " ko-disable";
          }
          return cls;
        };
      })(this));
      this.icon = ko.pureComputed((function(_this) {
        return function() {
          return ko.unwrap(params.icon || null);
        };
      })(this));
      this.disposes = this.disposes.concat([this.cls]);
    }

    buttonViewModel.prototype.mouseDown = function() {
      return this.active(true);
    };

    buttonViewModel.prototype.mouseUp = function() {
      return this.active(false);
    };

    buttonViewModel.prototype.mouseOver = function() {
      return this.hover(true);
    };

    buttonViewModel.prototype.mouseOut = function() {
      return this.hover(false);
    };

    return buttonViewModel;

  })(BaseModel);

  ko.components.register('ko-button', {
    viewModel: {
      createViewModel: function(params, componentInfo) {
        return new buttonViewModel(params, componentInfo);
      }
    },
    template: btnTemplate
  });

  buttonGroupViewModel = (function() {
    function buttonGroupViewModel(params, componentInfo1) {
      this.componentInfo = componentInfo1;
      this.data = ko.dataFor(this.componentInfo.element);
      this.cls = ko.pureComputed(function() {
        var cls, shape, size, vertical;
        cls = 'ko-button-group';
        shape = ko.unwrap(params.shape || null);
        if (shape) {
          cls = cls + " ko-" + shape;
        }
        size = ko.unwrap(params.size || null);
        if (size) {
          cls = cls + " ko-" + size;
        }
        vertical = ko.unwrap(params.vertical || false);
        if (vertical) {
          cls = cls + " ko-vertical";
        }
        return cls;
      });
    }

    return buttonGroupViewModel;

  })();

  ko.components.register('ko-button-group', {
    viewModel: {
      createViewModel: function(params, componentInfo) {
        return new buttonGroupViewModel(params, componentInfo);
      }
    },
    template: btnGroupTemplate
  });

}).call(this);

//# sourceMappingURL=button.js.map
