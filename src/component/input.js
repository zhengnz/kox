// Generated by CoffeeScript 1.12.1
(function() {
  var BaseModel, template, viewModel,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseModel = require('./base');

  template = require('../tpl/input.html');

  ko.bindingHandlers.koxUpdateInputMargin = {
    update: function(element, valueAccessor, allBindings) {
      var margin;
      margin = allBindings.get('inputMargin');
      return setTimeout(function() {
        return margin(element.offsetWidth + "px");
      }, 5);
    }
  };

  viewModel = (function(superClass) {
    extend(viewModel, superClass);

    function viewModel(params, componentInfo) {
      var can_use_placeholder, icon, ieVersion, label, labelClick, ref, ref1;
      viewModel.__super__.constructor.call(this, params);
      this.data = ko.dataFor(componentInfo.element);
      ieVersion = (ref = ko.utils.ieVersion) != null ? ref : 10;
      can_use_placeholder = ieVersion > 9;
      this.marginLeft = ko.observable('8px');
      this.marginRight = ko.observable('8px');
      this.focus = ko.observable(ko.unwrap(params.hasFocus || false));
      if (ko.isObservable(params.hasFocus)) {
        this.disposes.push(this.focus.subscribe(function(v) {
          return params.hasFocus(v);
        }));
      }
      this.type = ko.observable(ko.unwrap(params.type || 'text'));
      this.placeholder = ko.computed(function() {
        return ko.unwrap(params.placeholder || null);
      });
      params.value = (ref1 = params.value) != null ? ref1 : ko.observable(null);
      this.origin_type = this.type();
      this.value = ko.computed({
        read: function() {
          var value;
          value = ko.unwrap(params.value || null);
          if (!can_use_placeholder && !value && !this.focus()) {
            if (this.type() === 'password') {
              this.type('text');
            }
            return this.placeholder();
          }
          if (this.type() !== this.origin_type) {
            this.type(this.origin_type);
          }
          return value;
        },
        write: function(value) {
          if (ko.isObservable(params.value)) {
            return params.value(value);
          }
        },
        owner: this
      });
      this.visible = ko.pureComputed(function() {
        return ko.unwrap(params.visible || true);
      });
      icon = ko.utils.extend({
        left: null,
        right: null
      }, params.icon);
      this.left_icon = ko.pureComputed(function() {
        return ko.unwrap(icon.left);
      });
      this.right_icon = ko.pureComputed(function() {
        return ko.unwrap(icon.right);
      });
      label = ko.utils.extend({
        left: null,
        right: null
      }, params.label);
      this.left_label = ko.pureComputed(function() {
        return ko.unwrap(label.left);
      });
      this.right_label = ko.pureComputed(function() {
        return ko.unwrap(label.right);
      });
      labelClick = ko.utils.extend({
        left: null,
        right: null
      }, params.labelClick);
      this.left_label_click = labelClick.left ? labelClick.left.bind(this.data) : this.labelClick;
      this.right_label_click = labelClick.right ? labelClick.right.bind(this.data) : this.labelClick;
      this.size = ko.pureComputed(function() {
        return ko.unwrap(params.size || null);
      });
      this.disable = ko.pureComputed(function() {
        return ko.unwrap(params.disable || null);
      });
      this.leftListener = ko.pureComputed((function(_this) {
        return function() {
          return _this.left_icon() || _this.left_label();
        };
      })(this));
      this.rightListener = ko.pureComputed((function(_this) {
        return function() {
          return _this.right_icon() || _this.right_label();
        };
      })(this));
      this.disposes = this.disposes.concat([this.value, this.visible, this.left_icon, this.right_icon, this.left_label, this.right_label, this.size, this.placeholder, this.disable, this.leftListener, this.rightListener]);
    }

    viewModel.prototype.labelClick = function() {
      return this.focus(true);
    };

    return viewModel;

  })(BaseModel);

  ko.components.register('ko-input', {
    viewModel: {
      createViewModel: function(params, componentInfo) {
        return new viewModel(params, componentInfo);
      }
    },
    template: template
  });

}).call(this);

//# sourceMappingURL=input.js.map
